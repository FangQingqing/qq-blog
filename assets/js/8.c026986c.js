(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{563:function(t,s,a){"use strict";a.r(s);var n=a(5),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("2015年发布的ES6语法，直到2018年才正式接触到，这次的发版提供了很多新语法。对于开发来说，还大大地简化了代码量。")]),t._v(" "),a("h2",{attrs:{id:"ecmascript6简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ecmascript6简介"}},[t._v("#")]),t._v(" ECMAScript6简介")]),t._v(" "),a("h4",{attrs:{id:"babel转码器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#babel转码器"}},[t._v("#")]),t._v(" Babel转码器")]),t._v(" "),a("ul",[a("li",[t._v("作用：可以将ES6代码转为ES5代码")]),t._v(" "),a("li",[t._v("配置文件：.babelrc 存放在项目的根目录下，用来设置转码规则和插件")]),t._v(" "),a("li",[t._v("安装：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("npm install --save-dev babel-preset-lastest (最新规则)\nnpm install --save-dev babel-preset-react (react规则)\n")])])]),a("h2",{attrs:{id:"let和const"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#let和const"}},[t._v("#")]),t._v(" let和const")]),t._v(" "),a("h4",{attrs:{id:"let"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#let"}},[t._v("#")]),t._v(" let")]),t._v(" "),a("ul",[a("li",[t._v("声明变量，只在let命令所在的代码块内有效")]),t._v(" "),a("li",[t._v("声明的变量一定要在声明后使用，否则报错")]),t._v(" "),a("li",[t._v("不允许重复声明变量")]),t._v(" "),a("li",[t._v("可以在块级作用域中声明函数，在块级作用域之外不可引用")])]),t._v(" "),a("h4",{attrs:{id:"const"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#const"}},[t._v("#")]),t._v(" const")]),t._v(" "),a("ul",[a("li",[t._v("只读常量，一旦声明，常量的值不再改变")]),t._v(" "),a("li",[t._v("一旦声明立刻初始化，否则会报错。")]),t._v(" "),a("li",[t._v("只在声明所在的块级作用域内有效")]),t._v(" "),a("li",[t._v("不可重复声明，保证的是变量指向的内存地址不得改动")])]),t._v(" "),a("h2",{attrs:{id:"symbol"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol"}},[t._v("#")]),t._v(" Symbol")]),t._v(" "),a("p",[t._v("symbol是JS语言的第七种数据类型，表示独一无二的值。更多使用于对象的属性命名，防止属性名的冲突。")]),t._v(" "),a("p",[t._v("每一个Symbol值都是不相等的，用于对象的属性名时，就能保证不会出现同名的属性。这个对于一个对象由多个模块构成的情况非常有用，能防止某一个键被不小心改写或覆盖。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" mySymbol "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第一种写法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("mySymbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第二种写法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("mySymbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello!"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第三种写法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("defineProperty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mySymbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello!"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 以上写法都得到同样结果")]),t._v("\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("mySymbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "hello!"')]),t._v("\n")])])]),a("p",[t._v("注意：")]),t._v(" "),a("ul",[a("li",[t._v("Symbol值作为对象名时，不能用点运算符")]),t._v(" "),a("li",[t._v("在对象内部，使用Symbol值定义属性时，Symbol值必须放在方括号中")]),t._v(" "),a("li",[t._v("Symbol值作为属性名时，该属性还是公开属性，不是私有属性")]),t._v(" "),a("li",[t._v("Symbol作为属性名，遍历对象的时候，该属性不会出现在for...in，for...of循环中，也不会被Object.keys()，Object.getOwnPropertyNames()，JSON.stringify()返回")])]),t._v(" "),a("h2",{attrs:{id:"变量的解构赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量的解构赋值"}},[t._v("#")]),t._v(" 变量的解构赋值")]),t._v(" "),a("h4",{attrs:{id:"数组的解构赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组的解构赋值"}},[t._v("#")]),t._v(" 数组的解构赋值")]),t._v(" "),a("ul",[a("li",[t._v("ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h4",{attrs:{id:"对象的解构赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象的解构赋值"}},[t._v("#")]),t._v(" 对象的解构赋值")]),t._v(" "),a("ul",[a("li",[t._v("变量必须与属性同名")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("foo"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'aaa'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bar"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bbb'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("内部机制：先找到同名属性，然后再赋值给对应的变量，真正被赋值的是后者，而不是前者")]),t._v(" "),a("li",[t._v("对象的解构赋值也可以指定默认值，生效的前提是对象的属性值严格等于undefined")])]),t._v(" "),a("h4",{attrs:{id:"字符串的解构赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串的解构赋值"}},[t._v("#")]),t._v(" 字符串的解构赋值")]),t._v(" "),a("ul",[a("li",[t._v("字符串此时被转换成了一个类似数组的对象")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h4",{attrs:{id:"数值和布尔值的解构赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数值和布尔值的解构赋值"}},[t._v("#")]),t._v(" 数值和布尔值的解构赋值")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("toString"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("toString"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("解构赋值规则：只要等号右边的值不是对象或数组，就先将其转为对象")])]),t._v(" "),a("h4",{attrs:{id:"函数参数的解构赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数参数的解构赋值"}},[t._v("#")]),t._v(" 函数参数的解构赋值")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3")]),t._v("\n")])])]),a("h4",{attrs:{id:"不使用圆括号的情况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不使用圆括号的情况"}},[t._v("#")]),t._v(" 不使用圆括号的情况")]),t._v(" "),a("ul",[a("li",[t._v("变量声明语句")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("函数参数")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("赋值语句的模式")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("可以使用圆括号的情况：赋值语句的非模式部分")])]),t._v(" "),a("h4",{attrs:{id:"用途"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用途"}},[t._v("#")]),t._v(" 用途")]),t._v(" "),a("ul",[a("li",[t._v("变换变量的值")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("从函数返回多个值")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("example")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("example")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("函数参数的定义")]),t._v(" "),a("li",[t._v("提取JSON数据")]),t._v(" "),a("li",[t._v("函数参数的默认值")]),t._v(" "),a("li",[t._v("遍历Map结构")]),t._v(" "),a("li",[t._v("输入模块的指定方法")])]),t._v(" "),a("h2",{attrs:{id:"字符串的扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串的扩展"}},[t._v("#")]),t._v(" 字符串的扩展")]),t._v(" "),a("ul",[a("li",[t._v("字符的Unicode表示法：'\\uxxxx'")]),t._v(" "),a("li",[t._v("codePointAt()：能够正确处理4个字节储存的字符，返回一个字符的码点")]),t._v(" "),a("li",[t._v("String.fromCodePoint()：用于从码点返回对应字符")]),t._v(" "),a("li",[t._v("字符串的遍历器接口：for...of")]),t._v(" "),a("li",[t._v("at()：返回字符串给定位置的字符")]),t._v(" "),a("li",[t._v("includes()：返回布尔值，表示是否找到参数字符串")]),t._v(" "),a("li",[t._v("startsWith()：返回布尔值，表示参数字符串是否在原字符串的头部")]),t._v(" "),a("li",[t._v("endsWith()：返回布尔值，表示参数字符串是否在原字符串的尾部")]),t._v(" "),a("li",[t._v("repeat()：返回新字符串，表示将原字符值重复n次")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'x'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("repeat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'xxx'")]),t._v("\n")])])]),a("h2",{attrs:{id:"数值的扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数值的扩展"}},[t._v("#")]),t._v(" 数值的扩展")]),t._v(" "),a("ul",[a("li",[t._v("二进制表示：前缀0b or 0B，八进制表示：前缀0o or 0O")]),t._v(" "),a("li",[t._v("Number.isFinite()：判断数值是否为有限的，非数值一律返回false")]),t._v(" "),a("li",[t._v("Number.isNaN()：只有对NaN才返回true，非NaN一律返回false")]),t._v(" "),a("li",[t._v("Number.parseInt(), Number.parseFloat()")]),t._v(" "),a("li",[t._v("Number.isInteger()：判断一个值是否为整数")]),t._v(" "),a("li",[t._v("Number.EPSILON：极小常数  2.220446049250313e-16")]),t._v(" "),a("li",[t._v("Number.isSafeInteger()：判断一个整数是否在安全范围内")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("整数范围：-2^53 - 2^53\n最大值: Number.MAX_SAFE_INTEGER\n最小值: Number.MIN_SAFE_INTEGER\n")])])]),a("ul",[a("li",[t._v("Math对象的扩展")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Math.trunc()：除一个数的小数部分，返回整数部分\nMath.sign()：判断一个数到底是正数(+1),负数(-1),零(+0,-0),还是其他值(NaN)\nMath.cbrt()：计算一个数的立方根\nMath.clz32()：返回一个数的32位无符号整数形式有多少个前导0\nMath.imul()：返回两个数以32位带符号整数形式相乘的结果\nMath.hypot()：返回所有参数的平方和的平方根\n")])])]),a("ul",[a("li",[t._v("指数运算符：**")]),t._v(" "),a("li",[t._v("对数方法")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Math.expml()：e^x - 1\nMath.log1p()：Math.log(1 + x), x小于-1返回NaN\nMath.log1o()：Math.log2(x), x小于0返回NaN\n")])])]),a("ul",[a("li",[t._v("Integer数据类型")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("运算：几乎所有的Number运算符都可以用在Integer\nInteger类型不能与Number类型进行混合运算\n双等==不可以混合运算，全等===可以混合运算\n")])])]),a("h2",{attrs:{id:"函数的扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数的扩展"}},[t._v("#")]),t._v(" 函数的扩展")]),t._v(" "),a("ul",[a("li",[t._v("rest参数：形式为...变量名，用于获取函数的多余参数")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("注意：\nrest参数之后不能再有其他参数\n函数的length(计算函数参数个数)属性，不包括rest参数\n")])])]),a("ul",[a("li",[t._v("严格模式：只要函数参数使用了默认值，解构赋值或者扩展运算符，就不能设定为严格模式")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("规避这种限制：\n1.设定全局的严格模式\n2.把函数包在一个无参数的立即执行函数里面\n")])])]),a("ul",[a("li",[t._v("name属性：返回该函数的函数名")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Function构造函数返回的函数实例，name属性的值为anonymous\nbind返回的函数，name属性值会加上bind前缀\nfunction foo() {}; foo.bind({}).name\n")])])]),a("ul",[a("li",[t._v("箭头函数：ES6允许使用箭头(=>)定义函数")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("f")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("v")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("f")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("v")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象")]),t._v("\n")])])]),a("ul",[a("li",[t._v("绑定this：函数绑定运算符是并排两个冒号(:😃,双冒号左边是一个对象，右边是一个函数")])]),t._v(" "),a("h2",{attrs:{id:"数组的扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组的扩展"}},[t._v("#")]),t._v(" 数组的扩展")]),t._v(" "),a("ul",[a("li",[t._v("扩展运算符：(...) 可以展开数组")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("应用：\n合并数组：[1, 2, ...more]\n与解构赋值结合：const [first, ...rest] = [1, 2, 3, 4, 5]\n函数返回值：可以返回多个值\n字符串：[...'hello'] // ['h', 'e', 'l', 'l', 'o']\n")])])]),a("ul",[a("li",[t._v("Array.from()：用于将两类对象转为真正的数组")]),t._v(" "),a("li",[t._v("Array.of()：用于将一组值转换为数组")]),t._v(" "),a("li",[t._v("数组实例的copyWithin()：在当前数组内部，将指定位置的成员复制到其他位置；接收三个参数：target(起始位置开始替换)，start(从该位置开始读取数据)，end(到该位置前停止读取数据)")]),t._v(" "),a("li",[t._v("数组实例的find()和findIndex()：找出第一个符合条件的数组成员和他所在位置")]),t._v(" "),a("li",[t._v("fill()：用给定值填充一个数组，常用于空数组初始化")]),t._v(" "),a("li",[t._v("keys()：对键名的遍历")]),t._v(" "),a("li",[t._v("values()：对键值的遍历")]),t._v(" "),a("li",[t._v("entries()：对键值对的遍历")]),t._v(" "),a("li",[t._v("includes()：返回布尔值，表示某个数组是否包含给定的值")])]),t._v(" "),a("h2",{attrs:{id:"对象的扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象的扩展"}},[t._v("#")]),t._v(" 对象的扩展")]),t._v(" "),a("ul",[a("li",[t._v("object.is()：用来比较两个值是否严格相等")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不同之处：+0 != -0, NaN等于自身")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\nObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("is")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\nObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("is")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("ul",[a("li",[t._v("Object.assign()：用于对象的合并")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("为对象添加属性和方法\n克隆对象\n合并多个对象\n为属性指定默认值\n")])])]),a("ul",[a("li",[t._v("keys(), values(), entries()")]),t._v(" "),a("li",[t._v("Object.getPropertyDescriptors()：返回某个对象属性的描述对象")]),t._v(" "),a("li",[t._v("Null传导运算符：?. 只要其中一个返回null或undefined，就不再往下运算，而是返回undefined")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("obj?.prop or obj?.expr // 读取对象属性\nfunc?.(...args) //函数或对象方法的调用\nnew C?.(...args) //构造函数的调用\n")])])]),a("ul",[a("li",[t._v("Symbol：原始数据类型(独一无二，防止对象的属性重名)")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// symbol")]),t._v("\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Symbol值不能与其他类型进行运算，但可以显示转为字符串和布尔值，但不能转为数组\n属性名的遍历：Object.getOwnPropertySymbols()返回一个数组，成员是当前对象的所有用作属性名的symbol值\nSymbol.for()：判断有没有这个值，有返回这个值，没有返回一个新的Symbol值\nSymbol.keyFor()：返回一个已登记的Symbol类型值的key\n")])])]),a("h2",{attrs:{id:"set数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set数据结构"}},[t._v("#")]),t._v(" Set数据结构")]),t._v(" "),a("ul",[a("li",[t._v("类似数组，成员值唯一")]),t._v(" "),a("li",[t._v("在Set内部，两个NaN相等，而两个对象不相等")]),t._v(" "),a("li",[t._v("实例属性：Set.prototype.constructor:构造函数，默认是Set函数；Set.prototype.size():返回Set实例的成员总数")]),t._v(" "),a("li",[t._v("操作方法：add(value),delete(value),has(value),clear()")]),t._v(" "),a("li",[t._v("遍历操作：keys(),values(),entries(),forEach()")])]),t._v(" "),a("h2",{attrs:{id:"weakset数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#weakset数据结构"}},[t._v("#")]),t._v(" WeakSet数据结构")]),t._v(" "),a("ul",[a("li",[t._v("成员值唯一，但成员只能是对象(弱引用，不使用时回收)，成员个数不确定，不可遍历")]),t._v(" "),a("li",[t._v("方法：WeakSet.prototype.add(value), WeakSet.prototype.delete(value), WeakSet.prototype.has(value)")]),t._v(" "),a("li",[t._v("用途：存储DOM节点，不用担心DOM节点从文档移除时，引发内存泄漏")])]),t._v(" "),a("h2",{attrs:{id:"map数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#map数据结构"}},[t._v("#")]),t._v(" Map数据结构")]),t._v(" "),a("ul",[a("li",[t._v("类似对象(键值对集合)，键的范围不限于字符串，各种类型的值都可以当作键")]),t._v(" "),a("li",[t._v("属性：size(返回Map结构的成员总数)")]),t._v(" "),a("li",[t._v("方法：set(key, value)：设置键名和对应值;")]),t._v(" "),a("li",[t._v("get(key)：取key对应的值;")]),t._v(" "),a("li",[t._v("has(key)")]),t._v(" "),a("li",[t._v("delete(key)")]),t._v(" "),a("li",[t._v("clear()")]),t._v(" "),a("li",[t._v("遍历方法：keys(), values(), entries(), forEach()")])]),t._v(" "),a("h2",{attrs:{id:"weakmap数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#weakmap数据结构"}},[t._v("#")]),t._v(" WeakMap数据结构")]),t._v(" "),a("ul",[a("li",[t._v("用于生成键值对的集合")]),t._v(" "),a("li",[t._v("与Map区别：1.只接受对象作为键名(null除外), 2.WeakMap的键名所指向对象不计入垃圾回收机制")]),t._v(" "),a("li",[t._v("应用：在网页的DOM元素上添加数据")]),t._v(" "),a("li",[t._v("方法：get(), set(), has(), delete()")])]),t._v(" "),a("h2",{attrs:{id:"proxy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#proxy"}},[t._v("#")]),t._v(" Proxy")]),t._v(" "),a("ul",[a("li",[t._v("用于修改某些操作的默认行为")]),t._v(" "),a("li",[t._v("方法：get(): 拦截读取操作;")]),t._v(" "),a("li",[t._v("set(): 拦截赋值操作;")]),t._v(" "),a("li",[t._v("apply(): 拦截函数的调用;")]),t._v(" "),a("li",[t._v("has(): 拦截hasProperty操作;")]),t._v(" "),a("li",[t._v("construct(): 拦截new命令;")]),t._v(" "),a("li",[t._v("deleteProperty(), defineProperty(), getOwnPropertyDescriptor(), getPrototypeof()")])]),t._v(" "),a("h2",{attrs:{id:"reflect"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reflect"}},[t._v("#")]),t._v(" Reflect")]),t._v(" "),a("ul",[a("li",[t._v("将object对象一些明显属于语言内部方法放到Reflect对象上")]),t._v(" "),a("li",[t._v("修改某些object方法的返回结果，让其变得合理")]),t._v(" "),a("li",[t._v("让object操作都变成函数行为")]),t._v(" "),a("li",[t._v("Reflect对象的方法与Proxy对象的方法一一对应")])]),t._v(" "),a("h2",{attrs:{id:"promise对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise对象"}},[t._v("#")]),t._v(" Promise对象")]),t._v(" "),a("ul",[a("li",[t._v("是异步编程的一种解决方案")]),t._v(" "),a("li",[t._v("是一个容器，里面保存着某个未来才会结束的事件")]),t._v(" "),a("li",[t._v("是一个对象，从它可以获取异步操作的消息")]),t._v(" "),a("li",[t._v("特点：对象的状态不受外界影响(pending, fulfilled, rejected), 一旦状态改变，就不会再变")]),t._v(" "),a("li",[t._v("创造Promise实例")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" promise "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resolve"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 异步操作成功 */")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("error"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// resolve函数作用：将Promise对象的状态从“未完成”变成“成功”")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// reject函数作用：将Promise对象的状态从“未完成”变成“失败”")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Promise新建后立即执行")]),t._v("\n")])])]),a("ul",[a("li",[t._v("方法：Promise.prototype.then():为Promise实例添加状态改变时的回调函数，Promise.prototype.catch():用于指定发生错误时的回调函数，Promise.all():将多个Promise实例包装成一个新的Promise实例")])]),t._v(" "),a("h2",{attrs:{id:"iterator-和-for-of循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iterator-和-for-of循环"}},[t._v("#")]),t._v(" Iterator 和 for...of循环")]),t._v(" "),a("ul",[a("li",[t._v("Iterator概念：遍历器，接口，为不同数据结构提供统一的访问机制，一个数据结构只要具有Symbol.iterator属性，就可以认为是“可遍历的”")]),t._v(" "),a("li",[t._v("原生具备Iterator接口的数据结构如下：Array, Map, Set, string, TypedArray, 函数的arguments对象")]),t._v(" "),a("li",[t._v("方法：next():返回value和done，必须部署，return(),throw()：可选部署")]),t._v(" "),a("li",[t._v("for...of循环：使用范围：Set, Map, arguments对象, DOM, NodeList对象, Generator对象, 字符串, 数组")]),t._v(" "),a("li",[t._v("for...in缺点：数组的键名是数字，for...in循环不仅遍历数字键名，还会遍历手动添加的其他键，甚至包括原型键上的值，某些情况下，for...in循环会以任意 顺序遍历键名")]),t._v(" "),a("li",[t._v("for...of优点：有着同for...in一样简洁语法，但是没有for...in那些缺点；不同于forEach方法，他可以与break, continue和return配合使用；提供了遍历所有数据结构的统一操作接口")])]),t._v(" "),a("h2",{attrs:{id:"generator函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#generator函数"}},[t._v("#")]),t._v(" Generator函数")]),t._v(" "),a("ul",[a("li",[t._v("概念：提供一种异步编程解决方案，返回遍历器对象")]),t._v(" "),a("li",[t._v("特征：function关键字与函数名之间有一个星号(*), 函数内部使用yield表达式；")]),t._v(" "),a("li",[t._v("Generator函数分段执行，yield表达式是暂停执行标记，next方法可以恢复执行")]),t._v(" "),a("li",[t._v("yield表达式只能用在Generator函数内部，用在其他地方会报错")]),t._v(" "),a("li",[t._v("yield表达式如果用在另一个表达式中，必须放在圆括号里面")]),t._v(" "),a("li",[t._v("next方法的参数：表示上一个yield表达式的返回值")]),t._v(" "),a("li",[t._v("for...of循环：一旦next方法的返回对象的done属性为true，循环就会终止")]),t._v(" "),a("li",[t._v("应用：异步操作的同步化表达，控制流管理，部署Iterator接口，作为数据结构")])]),t._v(" "),a("h2",{attrs:{id:"generator函数的异步应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#generator函数的异步应用"}},[t._v("#")]),t._v(" Generator函数的异步应用")]),t._v(" "),a("ul",[a("li",[t._v("协程：多个线程互相协作，完成异步任务；协程遇到yield命令就暂停，等到执行权返回，再从暂停的地方继续往后执行")]),t._v(" "),a("li",[t._v("Thunk函数：自动执行Generator函数的一种方法，是传名调用(只在执行时求值)的一种实现策略，用来替换某个表达式")])]),t._v(" "),a("h2",{attrs:{id:"aync函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aync函数"}},[t._v("#")]),t._v(" aync函数")]),t._v(" "),a("ul",[a("li",[t._v("是Generator函数的语法糖")]),t._v(" "),a("li",[t._v("区别：* => async, yield => await")]),t._v(" "),a("li",[t._v("改进：内置执行器；更好的语义；更广的适用性；返回值是Promise")]),t._v(" "),a("li",[t._v("用法：async函数返回一个Promise对象，可以使用then方法添加回调函数")]),t._v(" "),a("li",[t._v("async函数内部return语句返回的值，会成为then方法回调函数的参数")]),t._v(" "),a("li",[t._v("正常情况下，await命令后面是一个Promise对象，如果不是，会被转成一个立即resolve的Promise对象")]),t._v(" "),a("li",[t._v("await命令后面的Promise对象如果变成reject状态，则reject的参数会被catch方法的回调函数接收到")]),t._v(" "),a("li",[t._v("只要一个await语句后面的Promise变成reject，那么async函数都会中断执行；")]),t._v(" "),a("li",[t._v("防止出错的方法，将其放在try...catch代码块中，await命令放在try...catch代码块中；")]),t._v(" "),a("li",[t._v("异步遍历器：next方法返回的value和done异步产生")])]),t._v(" "),a("h2",{attrs:{id:"class的基本语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class的基本语法"}},[t._v("#")]),t._v(" class的基本语法")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Point")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'('")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("','")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("')'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 定义类不需要加function，方法之间不需要逗号分隔")]),t._v("\n")])])]),a("ul",[a("li",[t._v("类的内部定义的方法都是不可枚举的")]),t._v(" "),a("li",[t._v("类的属性名可以采用表达式")]),t._v(" "),a("li",[t._v("类和模块内部默认就是严格模式")]),t._v(" "),a("li",[t._v("constructor是类的默认方法")]),t._v(" "),a("li",[t._v("ES6不提供私有方法和属性，解决：加#")]),t._v(" "),a("li",[t._v("class的静态方法，前面加static，实例不能继承，只能通过类调用")]),t._v(" "),a("li",[t._v("父类静态方法可以被子类继承")]),t._v(" "),a("li",[t._v("new.target属性：如果构造函数不是通过new命令调用，new.target返回undefined")])]),t._v(" "),a("h2",{attrs:{id:"class的继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class的继承"}},[t._v("#")]),t._v(" class的继承")]),t._v(" "),a("ul",[a("li",[t._v("使用extends关键字，extends关键字不仅可以用来继承类，还可以用来继承原生的构造函数")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("colorPoint")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Point")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" color")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("color "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" color"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// super方法：表示父类的构造函数，必须在constructor中才能调用（任何一个类都有constructor方法）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ES6继承机制：先创建父类实例对象this，再用子类的构造函数修改this")]),t._v("\n")])])]),a("ul",[a("li",[t._v("object.getPrototypeof(): 用来从子类上获取父类")]),t._v(" "),a("li",[t._v("类的prototype和_proto_属性，子类的_proto_属性表示构造函数的继承，总是指向父类，子类prototype属性的_proto_属性表示方法的继承，总是指向父类的prototype属性")])]),t._v(" "),a("h2",{attrs:{id:"decorator修饰器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#decorator修饰器"}},[t._v("#")]),t._v(" Decorator修饰器")]),t._v(" "),a("ul",[a("li",[t._v("Decorator是一个函数，用来修改类的行为")]),t._v(" "),a("li",[t._v("修饰器对类的行为的改变，是代码编译时发生的，不是在运行时")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("testable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("target")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isTestable "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n@testable\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyTestableClass")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyTestableClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isTestable "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("ul",[a("li",[t._v("修饰器只能用于类和类的方法，修饰器有注释作用，从外到内进入，从内到外执行")]),t._v(" "),a("li",[t._v("第三方模块：core-decorator.js; @autobind: 使方法中的this对象绑定原始对象；@readonly: 使属性或方法不可写")]),t._v(" "),a("li",[t._v("Minxin模式(混入)：在一个对象中混入另一个对象的方法")])]),t._v(" "),a("h2",{attrs:{id:"module语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#module语法"}},[t._v("#")]),t._v(" Module语法")]),t._v(" "),a("ul",[a("li",[t._v("模块功能：import(输入其他模块提供的功能)，export(模块对外接口，可以输出变量，函数和类)")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" firstName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Michael"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" lastName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Jackson"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" year "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1994")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  firstName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  lastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  year\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  firstName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  lastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  year\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./profile"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("export default: 为模块制定默认输出，该命令只能使用一次（本质：输出一个叫做default的变量或方法，然后系统允许你为他取任意名字）")]),t._v(" "),a("li",[t._v("import和export命令只能在模块的顶层")]),t._v(" "),a("li",[t._v("import()函数：实现动态加载功能；使用场合：按需加载，条件加载，动态的模块路径")]),t._v(" "),a("li",[t._v("import()加载模块成功后，这个模块作为对象当作then方法的参数")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./myModule.js"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("export1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" export2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("ul",[a("li",[t._v("脚本实现异步加载，defer:渲染完再执行；async:下载完就执行")]),t._v(" "),a("li",[t._v('ES6脚本加载模块：type="module" 默认defer加载')])])])}),[],!1,null,null,null);s.default=e.exports}}]);